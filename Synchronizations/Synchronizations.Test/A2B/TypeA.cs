//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace A2BHelperWithoutContextNamespace.TypeA
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Meta;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the A class
    /// </summary>
    [XmlNamespaceAttribute("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore")]
    [XmlNamespacePrefixAttribute("tpA")]
    [ModelRepresentationClassAttribute("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore#//A/")]
    public class A : ModelElement, IA, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NameA property
        /// </summary>
        private string _nameA;
        
        /// <summary>
        /// The backing field for the Elms property
        /// </summary>
        private ObservableCompositionOrderedSet<IB> _elms;
        
        private static IClass _classInstance;
        
        public A()
        {
            this._elms = new ObservableCompositionOrderedSet<IB>(this);
            this._elms.CollectionChanging += this.ElmsCollectionChanging;
            this._elms.CollectionChanged += this.ElmsCollectionChanged;
        }
        
        /// <summary>
        /// The nameA property
        /// </summary>
        [XmlElementNameAttribute("nameA")]
        [XmlAttributeAttribute(true)]
        public virtual string NameA
        {
            get
            {
                return this._nameA;
            }
            set
            {
                if ((this._nameA != value))
                {
                    string old = this._nameA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameAChanging(e);
                    this.OnPropertyChanging("NameA", e);
                    this._nameA = value;
                    this.OnNameAChanged(e);
                    this.OnPropertyChanged("NameA", e);
                }
            }
        }
        
        /// <summary>
        /// The elms property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("elms")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IB> Elms
        {
            get
            {
                return this._elms;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore#//A/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NameA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameAChanging;
        
        /// <summary>
        /// Gets fired when the NameA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameAChanged;
        
        /// <summary>
        /// Raises the NameAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Elms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElmsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Elms", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Elms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElmsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Elms", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int elmsIndex = ModelHelper.IndexOfReference(this.Elms, element);
            if ((elmsIndex != -1))
            {
                return ModelHelper.CreatePath("elms", elmsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ELMS"))
            {
                if ((index < this.Elms.Count))
                {
                    return this.Elms[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAMEA"))
            {
                return this.NameA;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ELMS"))
            {
                return this._elms;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAMEA"))
            {
                this.NameA = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore#//A/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the A class
        /// </summary>
        public class AChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private A _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AChildrenCollection(A parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Elms.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IB elmsCasted = item.As<IB>();
                if ((elmsCasted != null))
                {
                    this._parent.Elms.Add(elmsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Elms.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Elms.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> elmsEnumerator = this._parent.Elms.GetEnumerator();
                try
                {
                    for (
                    ; elmsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elmsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elmsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IB bItem = item.As<IB>();
                if (((bItem != null) 
                            && this._parent.Elms.Remove(bItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Elms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the A class
        /// </summary>
        public class AReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private A _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AReferencedElementsCollection(A parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Elms.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IB elmsCasted = item.As<IB>();
                if ((elmsCasted != null))
                {
                    this._parent.Elms.Add(elmsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Elms.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Elms.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> elmsEnumerator = this._parent.Elms.GetEnumerator();
                try
                {
                    for (
                    ; elmsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elmsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elmsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IB bItem = item.As<IB>();
                if (((bItem != null) 
                            && this._parent.Elms.Remove(bItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Elms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nameA property
        /// </summary>
        private sealed class NameAProxy : ModelPropertyChange<IA, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameAProxy(IA modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NameA;
                }
                set
                {
                    this.ModelElement.NameA = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameAChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameAChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the B class
    /// </summary>
    [XmlNamespaceAttribute("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore")]
    [XmlNamespacePrefixAttribute("tpA")]
    [ModelRepresentationClassAttribute("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore#//B/")]
    public class B : ModelElement, IB, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NameB property
        /// </summary>
        private string _nameB;
        
        /// <summary>
        /// The backing field for the Elms property
        /// </summary>
        private ObservableCompositionOrderedSet<IA> _elms;
        
        private static IClass _classInstance;
        
        public B()
        {
            this._elms = new ObservableCompositionOrderedSet<IA>(this);
            this._elms.CollectionChanging += this.ElmsCollectionChanging;
            this._elms.CollectionChanged += this.ElmsCollectionChanged;
        }
        
        /// <summary>
        /// The nameB property
        /// </summary>
        [XmlElementNameAttribute("nameB")]
        [XmlAttributeAttribute(true)]
        public virtual string NameB
        {
            get
            {
                return this._nameB;
            }
            set
            {
                if ((this._nameB != value))
                {
                    string old = this._nameB;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameBChanging(e);
                    this.OnPropertyChanging("NameB", e);
                    this._nameB = value;
                    this.OnNameBChanged(e);
                    this.OnPropertyChanged("NameB", e);
                }
            }
        }
        
        /// <summary>
        /// The elms property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("elms")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IA> Elms
        {
            get
            {
                return this._elms;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new BChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore#//B/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NameB property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameBChanging;
        
        /// <summary>
        /// Gets fired when the NameB property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameBChanged;
        
        /// <summary>
        /// Raises the NameBChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameBChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameBChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameBChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Elms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElmsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Elms", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Elms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElmsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Elms", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int elmsIndex = ModelHelper.IndexOfReference(this.Elms, element);
            if ((elmsIndex != -1))
            {
                return ModelHelper.CreatePath("elms", elmsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ELMS"))
            {
                if ((index < this.Elms.Count))
                {
                    return this.Elms[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAMEB"))
            {
                return this.NameB;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ELMS"))
            {
                return this._elms;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAMEB"))
            {
                this.NameB = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("platform:/resource/ListMetamodelRefactoring/Metamodel/TypeA.ecore#//B/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the B class
        /// </summary>
        public class BChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private B _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BChildrenCollection(B parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Elms.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IA elmsCasted = item.As<IA>();
                if ((elmsCasted != null))
                {
                    this._parent.Elms.Add(elmsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Elms.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Elms.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> elmsEnumerator = this._parent.Elms.GetEnumerator();
                try
                {
                    for (
                    ; elmsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elmsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elmsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IA aItem = item.As<IA>();
                if (((aItem != null) 
                            && this._parent.Elms.Remove(aItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Elms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the B class
        /// </summary>
        public class BReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private B _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BReferencedElementsCollection(B parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Elms.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Elms.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IA elmsCasted = item.As<IA>();
                if ((elmsCasted != null))
                {
                    this._parent.Elms.Add(elmsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Elms.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Elms.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> elmsEnumerator = this._parent.Elms.GetEnumerator();
                try
                {
                    for (
                    ; elmsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elmsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elmsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IA aItem = item.As<IA>();
                if (((aItem != null) 
                            && this._parent.Elms.Remove(aItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Elms).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nameB property
        /// </summary>
        private sealed class NameBProxy : ModelPropertyChange<IB, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameBProxy(IB modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NameB;
                }
                set
                {
                    this.ModelElement.NameB = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameBChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameBChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The public interface for B
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(B))]
    [XmlDefaultImplementationTypeAttribute(typeof(B))]
    public interface IB : IModelElement
    {
        
        /// <summary>
        /// The nameB property
        /// </summary>
        string NameB
        {
            get;
            set;
        }
        
        /// <summary>
        /// The elms property
        /// </summary>
        IOrderedSetExpression<IA> Elms
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the NameB property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameBChanging;
        
        /// <summary>
        /// Gets fired when the NameB property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameBChanged;
    }
    
    /// <summary>
    /// The public interface for A
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(A))]
    [XmlDefaultImplementationTypeAttribute(typeof(A))]
    public interface IA : IModelElement
    {
        
        /// <summary>
        /// The nameA property
        /// </summary>
        string NameA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The elms property
        /// </summary>
        IOrderedSetExpression<IB> Elms
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the NameA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameAChanging;
        
        /// <summary>
        /// Gets fired when the NameA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameAChanged;
    }
}
