//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The default implementation of the ModelElement class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//ModelElement/")]
    public abstract class ModelElement : ModelElement, NMF.Models.Meta.IModelElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AbsoluteUri property
        /// </summary>
        private Uri _absoluteUri;
        
        /// <summary>
        /// The backing field for the RelativeUri property
        /// </summary>
        private Uri _relativeUri;
        
        /// <summary>
        /// The backing field for the Extensions property
        /// </summary>
        private ModelElementExtensionsCollection _extensions;
        
        /// <summary>
        /// The backing field for the Parent property
        /// </summary>
        private NMF.Models.Meta.IModelElement _parent;
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private IReferenceType _type;
        
        private static IClass _classInstance;
        
        public ModelElement()
        {
            this._extensions = new ModelElementExtensionsCollection(this);
            this._extensions.CollectionChanging += this.ExtensionsCollectionChanging;
            this._extensions.CollectionChanged += this.ExtensionsCollectionChanged;
        }
        
        /// <summary>
        /// The AbsoluteUri property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Uri AbsoluteUri
        {
            get
            {
                return this._absoluteUri;
            }
            set
            {
                if ((this._absoluteUri != value))
                {
                    Uri old = this._absoluteUri;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAbsoluteUriChanging(e);
                    this.OnPropertyChanging("AbsoluteUri", e);
                    this._absoluteUri = value;
                    this.OnAbsoluteUriChanged(e);
                    this.OnPropertyChanged("AbsoluteUri", e);
                }
            }
        }
        
        /// <summary>
        /// The RelativeUri property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Uri RelativeUri
        {
            get
            {
                return this._relativeUri;
            }
            set
            {
                if ((this._relativeUri != value))
                {
                    Uri old = this._relativeUri;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRelativeUriChanging(e);
                    this.OnPropertyChanging("RelativeUri", e);
                    this._relativeUri = value;
                    this.OnRelativeUriChanged(e);
                    this.OnPropertyChanged("RelativeUri", e);
                }
            }
        }
        
        /// <summary>
        /// The Extensions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("ExtendedElement")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IModelElementExtension> Extensions
        {
            get
            {
                return this._extensions;
            }
        }
        
        /// <summary>
        /// The Parent property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual NMF.Models.Meta.IModelElement Parent
        {
            get
            {
                return this._parent;
            }
            set
            {
                if ((this._parent != value))
                {
                    NMF.Models.Meta.IModelElement old = this._parent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParentChanging(e);
                    this.OnPropertyChanging("Parent", e);
                    this._parent = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetParent;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetParent;
                    }
                    this.OnParentChanged(e);
                    this.OnPropertyChanged("Parent", e);
                }
            }
        }
        
        /// <summary>
        /// The Type property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IReferenceType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    IReferenceType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ModelElementChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ModelElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired before the AbsoluteUri property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AbsoluteUriChanging;
        
        /// <summary>
        /// Gets fired when the AbsoluteUri property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AbsoluteUriChanged;
        
        /// <summary>
        /// Gets fired before the RelativeUri property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelativeUriChanging;
        
        /// <summary>
        /// Gets fired when the RelativeUri property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelativeUriChanged;
        
        /// <summary>
        /// Gets fired before the Parent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentChanging;
        
        /// <summary>
        /// Gets fired when the Parent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public abstract IClass GetClass();
        
        /// <summary>
        /// Raises the AbsoluteUriChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbsoluteUriChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AbsoluteUriChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AbsoluteUriChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbsoluteUriChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AbsoluteUriChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RelativeUriChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelativeUriChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelativeUriChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RelativeUriChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelativeUriChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelativeUriChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Extensions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtensionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Extensions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Extensions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtensionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Extensions", e);
        }
        
        /// <summary>
        /// Raises the ParentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Parent property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParent(object sender, System.EventArgs eventArgs)
        {
            this.Parent = null;
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            this.Type = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ABSOLUTEURI"))
            {
                return this.AbsoluteUri;
            }
            if ((attribute == "RELATIVEURI"))
            {
                return this.RelativeUri;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EXTENSIONS"))
            {
                return this._extensions;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARENT"))
            {
                this.Parent = ((NMF.Models.Meta.IModelElement)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((IReferenceType)(value));
                return;
            }
            if ((feature == "ABSOLUTEURI"))
            {
                this.AbsoluteUri = ((Uri)(value));
                return;
            }
            if ((feature == "RELATIVEURI"))
            {
                this.RelativeUri = ((Uri)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PARENT"))
            {
                return new ParentProxy(this);
            }
            if ((attribute == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PARENT"))
            {
                return new ParentProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ModelElement class
        /// </summary>
        public class ModelElementChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ModelElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ModelElementChildrenCollection(ModelElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Extensions.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IModelElementExtension extensionsCasted = item.As<IModelElementExtension>();
                if ((extensionsCasted != null))
                {
                    this._parent.Extensions.Add(extensionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Extensions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Extensions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> extensionsEnumerator = this._parent.Extensions.GetEnumerator();
                try
                {
                    for (
                    ; extensionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extensionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extensionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IModelElementExtension modelElementExtensionItem = item.As<IModelElementExtension>();
                if (((modelElementExtensionItem != null) 
                            && this._parent.Extensions.Remove(modelElementExtensionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Extensions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ModelElement class
        /// </summary>
        public class ModelElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ModelElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ModelElementReferencedElementsCollection(ModelElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Extensions.Count);
                    if ((this._parent.Parent != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentChanged += this.PropagateValueChanges;
                this._parent.TypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentChanged -= this.PropagateValueChanges;
                this._parent.TypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IModelElementExtension extensionsCasted = item.As<IModelElementExtension>();
                if ((extensionsCasted != null))
                {
                    this._parent.Extensions.Add(extensionsCasted);
                }
                if ((this._parent.Parent == null))
                {
                    NMF.Models.Meta.IModelElement parentCasted = item.As<NMF.Models.Meta.IModelElement>();
                    if ((parentCasted != null))
                    {
                        this._parent.Parent = parentCasted;
                        return;
                    }
                }
                if ((this._parent.Type == null))
                {
                    IReferenceType typeCasted = item.As<IReferenceType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Extensions.Clear();
                this._parent.Parent = null;
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Extensions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Parent))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> extensionsEnumerator = this._parent.Extensions.GetEnumerator();
                try
                {
                    for (
                    ; extensionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extensionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extensionsEnumerator.Dispose();
                }
                if ((this._parent.Parent != null))
                {
                    array[arrayIndex] = this._parent.Parent;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IModelElementExtension modelElementExtensionItem = item.As<IModelElementExtension>();
                if (((modelElementExtensionItem != null) 
                            && this._parent.Extensions.Remove(modelElementExtensionItem)))
                {
                    return true;
                }
                if ((this._parent.Parent == item))
                {
                    this._parent.Parent = null;
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Extensions).Concat(this._parent.Parent).Concat(this._parent.Type).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AbsoluteUri property
        /// </summary>
        private sealed class AbsoluteUriProxy : ModelPropertyChange<NMF.Models.Meta.IModelElement, Uri>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AbsoluteUriProxy(NMF.Models.Meta.IModelElement modelElement) : 
                    base(modelElement, "AbsoluteUri")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Uri Value
            {
                get
                {
                    return this.ModelElement.AbsoluteUri;
                }
                set
                {
                    this.ModelElement.AbsoluteUri = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RelativeUri property
        /// </summary>
        private sealed class RelativeUriProxy : ModelPropertyChange<NMF.Models.Meta.IModelElement, Uri>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RelativeUriProxy(NMF.Models.Meta.IModelElement modelElement) : 
                    base(modelElement, "RelativeUri")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Uri Value
            {
                get
                {
                    return this.ModelElement.RelativeUri;
                }
                set
                {
                    this.ModelElement.RelativeUri = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Parent property
        /// </summary>
        private sealed class ParentProxy : ModelPropertyChange<NMF.Models.Meta.IModelElement, NMF.Models.Meta.IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentProxy(NMF.Models.Meta.IModelElement modelElement) : 
                    base(modelElement, "Parent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IModelElement Value
            {
                get
                {
                    return this.ModelElement.Parent;
                }
                set
                {
                    this.ModelElement.Parent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Models.Meta.IModelElement, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Models.Meta.IModelElement modelElement) : 
                    base(modelElement, "Type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}

